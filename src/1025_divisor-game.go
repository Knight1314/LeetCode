package src

/*
爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。

最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：

选出任一 x，满足 0 < x < N 且 N % x == 0 。
用 N - x 替换黑板上的数字 N 。
如果玩家无法执行这些操作，就会输掉游戏。

只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 false。假设两个玩家都以最佳状态参与游戏。



示例 1：

输入：2
输出：true
解释：爱丽丝选择 1，鲍勃无法进行操作。
示例 2：

输入：3
输出：false
解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。


提示：

1 <= N <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/divisor-game
*/
func divisorGame(N int) bool {
	dp := make([]bool, N+1)
	dp[1] = false
	for i := 2; i <= N; i++ {
		for j := 1; j <= i/2; j++ {
			if i%j == 0 && dp[i-j] == false {
				dp[i] = true
				break
			}
		}

	}
	return dp[N]
}

/*
1. 暴力解法
拆分当前数的因子，如果N-X是false的话，那当前就是爱丽丝赢

2. 奇偶性分析
当N = 2 爱丽斯赢
当N = 3 爱丽斯输
对于任意一个偶数，当爱丽斯 -1时变成奇数，而奇数只能优奇数相乘而得，所以必定得到一个偶数，因此爱丽斯总能得到一个偶数，
直到为2，爱丽斯赢

更为巧妙的地方在于判断偶数 (N&1)==0
*/
